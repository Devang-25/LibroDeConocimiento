---------------------------------------------------------------------------

#!/bin/bash

# Looping with Numbers
# Use for loops to display the natural numbers from 1 to 50.

for ctr in {1..50}
do
    echo ${ctr}
done

---------------------------------------------------------------------------

#!/bin/bash

# Looping and Skipping
# Your task is to use for loops to display only odd natural numbers from 1 to 99.

for ctr in {1..100..2}
do
    echo ${ctr}
done

---------------------------------------------------------------------------

#!/bin/bash

# Let's Echo
# Write a bash script which does just one thing: saying "HELLO".

echo HELLO

---------------------------------------------------------------------------

#!/bin/bash

# A Personalized Echo
# Write a Bash script which accepts name as input and displays a greeting: "Welcome (name)"

read name
echo "Welcome "${name}

---------------------------------------------------------------------------

#!/bin/bash

# The World of Numbers
# Given two integers, x and y, find their sum, difference, product, and quotient.

read num1
read num2

echo $((${num1} + ${num2}))
echo $((${num1} - ${num2}))
echo $((${num1} * ${num2}))
echo $((${num1} / ${num2}))

---------------------------------------------------------------------------

#!/bin/bash

# Comparing Numbers
# Given two integers, X and Y, identify whether X>Y or X<Y or X=Y.
# Exactly one of the following lines:
# - X is less than Y
# - X is greater than Y
# - X is equal to Y

read X
read Y

operationResult=""

if [[ ${X} > ${Y} ]]; then
    operationResult="is greater than"
elif [[ ${X} < ${Y} ]]; then
    operationResult="is less than"
else
    operationResult="is equal to"
fi

echo "X "${operationResult}" Y"

---------------------------------------------------------------------------

#!/bin/bash

# Getting started with conditionals
# Read in one character from the user (this may be 'Y', 'y', 'N', 'n'). If the character is 'Y' or 'y' display "YES". If the character is 'N' or 'n' display "NO". No other character will be provided as input.

read input

if [[ ${input} == 'Y' || ${input} == 'y' ]]; then
    echo "YES"
else
    echo "NO"
fi

---------------------------------------------------------------------------

#!/bin/bash

# More on Conditionals
# Given three integers (X, Y, and Z) representing the three sides of a triangle, identify whether the triangle is Scalene, Isosceles, or Equilateral.

read x
read y
read z

EQUILATERAL="EQUILATERAL"
ISOSCELES="ISOSCELES"
SCALENE="SCALENE"

if [[ ${x} == ${y} && ${y} == ${z} ]]; then
    echo ${EQUILATERAL}
elif [[ ${x} == ${y} || ${x} == ${z} || ${y} == ${z} ]]; then
    echo ${ISOSCELES}
else
    echo ${SCALENE}
fi

-----------------------------

#!/bin/bash

# Arithmetic Operations
# We provide you with expressions containing +,-,*,^, / and parenthesis. None of the numbers in the expression involved will exceed 999.
# Your task is to evaluate the expression and display the correct output rounding upto 3 decimal places.
# Sample Input 1
# 5+50*3/20 + (19*2)/7
# Sample Input 2
# -105+50*3/20 + (19^2)/7
# Sample Input 3
# (-105.5*7+50*3)/20 + (19^2)/7
# Sample Output 1
# 17.929
# Sample Output 2
# -45.929
# Sample Output 3
# 22.146

read expression

# bc alone does not include decimal places, the scale command would include them but will also truncate exceeding decimal places but will not round off
echo "scale=4; ${expression}" | bc | xargs printf "%0.3f"

# bc alone does not include decimal places, the -l somehow includes decimal places
# echo ${expression} | bc -l | xargs printf "%0.3f"

-----------------------------

#!/bin/bash

# Compute the Average
# Given N integers, compute their average correct to three decimal places.

read N
result=0

for (( ctr=1; ctr<=${N}; ctr++ ))
do
    read num
    result=$((${result}+${num}))
done

# wrong answer, trims decimal places upon echo
# echo $((${result}/N)) | xargs printf "%0.3f"

# correct answer, does calculation by bc command
# echo ${result}"/"${N} | bc -l | xargs printf "%0.3f"
printf "%0.3f" $(echo ${result}"/"${N} | bc -l)

-----------------------------

#!/bin/bash

# Cut #1
# Given N lines of input, print the 3rd character from each line as a new line of output.
# It is guaranteed that each of the n lines of input will have a 3rd character.

# soln 1
while read input; do
{
    echo ${input:2:1}
}
done

# soln 2
# cat | cut -c 3
# cut works on every line, therefore is not necessary perform a loop.

-----------------------------

#!/bin/bash

# Cut #2
# Display the 2nd and 7th character from each line of text.
# Sample Input
# Hello
# World
# how are you
# Sample Output
# e
# o
# oe

cut -c 2,7

-----------------------------


#!/bin/bash

# Cut #3
# Display a range of characters starting at the 2nd position of a string and ending at the 7th position (both positions included).
# Sample Input
# Hello
# World
# how are you
# Sample Output
# ello
# orld
# ow are

cut -c 2-7

-----------------------------

#!/bin/bash

# Cut #4
# Display the first four characters from each line of text.
# Sample Input
# Hello
# World
# how are you
# Sample Output
# Hell
# Worl
# how

cut -c -4

-----------------------------

#!/bin/bash

# Cut #5
# Given a tab delimited file with several columns (tsv format) print the first three fields.
# Sample Input
# 1   New York, New York[10]  8,244,910   1   New York-Northern New Jersey-Long Island, NY-NJ-PA MSA  19,015,900  1   New York-Newark-Bridgeport, NY-NJ-CT-PA CSA 22,214,083
# 2   Los Angeles, California 3,819,702   2   Los Angeles-Long Beach-Santa Ana, CA MSA    12,944,801  2   Los Angeles-Long Beach-Riverside, CA CSA    18,081,569
# 3   Chicago, Illinois   2,707,120   3   Chicago-Joliet-Naperville, IL-IN-WI MSA 9,504,753   3   Chicago-Naperville-Michigan City, IL-IN-WI CSA  9,729,825
# 4   Houston, Texas  2,145,146   4   Dallas-Fort Worth-Arlington, TX MSA 6,526,548   4   Washington-Baltimore-Northern Virginia, DC-MD-VA-WV CSA 8,718,083
# 5   Philadelphia, Pennsylvania[11]  1,536,471   5   Houston-Sugar Land-Baytown, TX MSA  6,086,538   5   Boston-Worcester-Manchester, MA-RI-NH CSA   7,601,061
# Sample Output
# 1   New York, New York[10]  8,244,910
# 2   Los Angeles, California 3,819,702
# 3   Chicago, Illinois   2,707,120
# 4   Houston, Texas  2,145,146
# 5   Philadelphia, Pennsylvania[11]  1,536,471

cut -f 1-3

-----------------------------

#!/bin/bash

Cut #6
# Print the characters from thirteenth position to the end.
# Sample Input
# New York is a state in the Northeastern and Mid-Atlantic regions of the United States.
# New York is the 27th-most extensive, the third-most populous populated of the 50 United States.
# New York is bordered by New Jersey and Pennsylvania to the south.
# About one third of all the battles of the Revolutionary War took place in New York.
# Henry Hudson's 1609 voyage marked the beginning of European involvement with the area.
# Sample Output
# a state in the Northeastern and Mid-Atlantic regions of the United States.
# the 27th-most extensive, the third-most populous populated of the 50 United States.
# bordered by New Jersey and Pennsylvania to the south.
# ird of all the battles of the Revolutionary War took place in New York.
# 's 1609 voyage marked the beginning of European involvement with the area.

cut -c 13-

-----------------------------

#!/bin/bash

# Cut #7
# Given a sentence, identify and display its fourth word. Assume that the space (' ') is the only delimiter between words.
# Sample Input
# Hello
# World
# how are you
# Sample Output
# Hello
# World

cut -d " " -f 4

----------------------------------------------

# !/bin/bash
# Cut #8
# Given a sentence, identify and display its first three words. Assume that the space (' ') is the only delimiter between words.
# Sample Input
# New York is a state in the Northeastern and Mid-Atlantic regions of the United States. 
# New York is the 27th-most extensive, the third-most populous populated of the 50 United States. 
# New York is bordered by New Jersey and Pennsylvania to the south.
# About one third of all the battles of the Revolutionary War took place in New York.
# Henry Hudson's 1609 voyage marked the beginning of European involvement with the area.
# Sample Output
# New York is
# New York is
# New York is
# About one third
# Henry Hudson's 1609

cut -d " " -f 1-3

----------------------------------------------

# !/bin/bash

# Cut #9
# Given a tab delimited file with several columns (tsv format) print the fields from second fields to last field.

# Sample Input
# 1   New York, New York[10]  8,244,910   1   New York-Northern New Jersey-Long Island, NY-NJ-PA MSA  19,015,900  1   New York-Newark-Bridgeport, NY-NJ-CT-PA CSA 22,214,083
# 2   Los Angeles, California 3,819,702   2   Los Angeles-Long Beach-Santa Ana, CA MSA    12,944,801  2   Los Angeles-Long Beach-Riverside, CA CSA    18,081,569
# 3   Chicago, Illinois   2,707,120   3   Chicago-Joliet-Naperville, IL-IN-WI MSA 9,504,753   3   Chicago-Naperville-Michigan City, IL-IN-WI CSA  9,729,825
# 4   Houston, Texas  2,145,146   4   Dallas-Fort Worth-Arlington, TX MSA 6,526,548   4   Washington-Baltimore-Northern Virginia, DC-MD-VA-WV CSA 8,718,083
# 5   Philadelphia, Pennsylvania[11]  1,536,471   5   Houston-Sugar Land-Baytown, TX MSA  6,086,538   5   Boston-Worcester-Manchester, MA-RI-NH CSA   7,601,061

# Sample Output
# New York, New York[10]  8,244,910   1   New York-Northern New Jersey-Long Island, NY-NJ-PA MSA  19,015,900  1   New York-Newark-Bridgeport, NY-NJ-CT-PA CSA 22,214,083
# Los Angeles, California 3,819,702   2   Los Angeles-Long Beach-Santa Ana, CA MSA    12,944,801  2   Los Angeles-Long Beach-Riverside, CA CSA    18,081,569
# Chicago, Illinois   2,707,120   3   Chicago-Joliet-Naperville, IL-IN-WI MSA 9,504,753   3   Chicago-Naperville-Michigan City, IL-IN-WI CSA  9,729,825
# Houston, Texas  2,145,146   4   Dallas-Fort Worth-Arlington, TX MSA 6,526,548   4   Washington-Baltimore-Northern Virginia, DC-MD-VA-WV CSA 8,718,083
# Philadelphia, Pennsylvania[11]  1,536,471   5   Houston-Sugar Land-Baytown, TX MSA  6,086,538   5   Boston-Worcester-Manchester, MA-RI-NH CSA   7,601,061

cut -f 2-

----------------------------------------------

#!/bin/bash

# Head of a Text File #1
# In this challenge, we practice using the head command to display the first n lines of a text file.
# Display the first 20 lines of an input file.

head -n 20

----------------------------------------------

#!/bin/bash

# Middle of a Text File
# Display the lines (from line number 12 to 22, both inclusive) of a given text file.

head -n 22 | tail -n 11

----------------------------------------------

#!/bin/bash

# Tail of a Text File #1
# In this challenge, we practice using the tail command to display the last n lines of a text file.
# Display the last 20 lines of an input file.

tail -n 20

----------------------------------------------

#!/bin/bash

# Tail of a Text File #2
# In this challenge, we practice using the tail command to display the last n characters of a text file.
# Display the last 20 characters of an input file.

tail -c 20

----------------------------------------------

#!/bin/bash

# 'Tr' Command #1
# In this challenge, we practice using the tr command because it is a useful translation tool in Linux.
# In a given fragment of text, replace all parentheses ()  with box brackets [].
# Sample Input
# int i=(int)5.8
# (23 + 5)*2
# Sample Output
# int i=[int]5.8
# [23 + 5]*2

tr ['('] ['['] | tr [')'] [']']

# from tutorial
# tr "()" "[]"

----------------------------------------------

#!/bin/bash

# Head of a Text File #2
# In this challenge, we practice using the head command to display the first  characters of a text file.
# Display the first 20 characters of an input file.

head -c 20

----------------------------------------------

# !/bin/bash

# 'Tr' Command #2
# In this challenge, we practice using the tr command because it is a useful translation tool in Linux.
# In a given fragment of text, delete all the lowercase characters a-z.

while read input; do
{
    # echo ${input} | tr [:lower:] '\0'
    echo ${input} | tr -d [:lower:]
}
done

# from Discussions
# tr -d [:lower:]
# tr -d a-z
# tr -d abcdefghijklmnopqrstuvwxyz

----------------------------------------------

#!/bin/bash

# 'Tr' Command #3

# In a given fragment of text, replace all sequences of multiple spaces with just one space.

# Sample Input
# He  llo
# Wor  ld
# how  are  you
# Sample Output
# He llo
# Wor ld
# how are you

tr -s ' '

----------------------------------------------

#!/bin/bash

# Sort Command #1

# In this challenge, we practice using the sort command to sort input in text or TSV formats.

# Given a text file, order the lines in lexicographical order.

# Sample Input
# Dr. Rajendra Prasad     January 26, 1950    May 13, 1962
# Dr. S. Radhakrishnan        May 13, 1962    May 13, 1967
# Dr. Zakir Hussain       May 13, 1967    August 24, 1969
# Shri Varahagiri Venkata Giri        August 24, 1969 August 24, 1974
# Shri Fakhruddin Ali Ahmed       August 24, 1974 February 11, 1977
# Shri Neelam Sanjiva Reddy       July 25, 1977   July 25, 198
# Sample Output
# Dr. Rajendra Prasad     January 26, 1950    May 13, 1962
# Dr. S. Radhakrishnan        May 13, 1962    May 13, 1967
# Dr. Zakir Hussain       May 13, 1967    August 24, 1969
# Shri Fakhruddin Ali Ahmed       August 24, 1974 February 11, 1977
# Shri Neelam Sanjiva Reddy       July 25, 1977   July 25, 198
# Shri Varahagiri Venkata Giri        August 24, 1969 August 24, 1974

sort

----------------------------------------------

#!/bin/bash

# Sort Command #2
# In this challenge, we practice using the sort command to sort input in text or TSV formats.
# Given a text file, order the lines in reverse lexicographical order (i.e. Z-A instead of A-Z).

# Sample Input
# Dr. Rajendra Prasad     January 26, 1950    May 13, 1962
# Dr. S. Radhakrishnan        May 13, 1962    May 13, 1967
# Dr. Zakir Hussain       May 13, 1967    August 24, 1969
# Shri Varahagiri Venkata Giri        August 24, 1969 August 24, 1974
# Shri Fakhruddin Ali Ahmed       August 24, 1974 February 11, 1977
# Shri Neelam Sanjiva Reddy       July 25, 1977   July 25, 198
# Sample Output
# Shri Varahagiri Venkata Giri        August 24, 1969 August 24, 1974
# Shri Neelam Sanjiva Reddy       July 25, 1977   July 25, 198
# Shri Fakhruddin Ali Ahmed       August 24, 1974 February 11, 1977
# Dr. Zakir Hussain       May 13, 1967    August 24, 1969
# Dr. S. Radhakrishnan        May 13, 1962    May 13, 1967
# Dr. Rajendra Prasad     January 26, 1950    May 13, 1962

sort -r

----------------------------------------------

# !/bin/bash

# Sort Command #3

# In this challenge, we practice using the sort command to sort input in text or TSV formats.

# You are given a text file where each line contains a number. The numbers may be either an integer or have decimal places. There will be no extra characters other than the number or the newline at the end of each line. Sort the lines in ascending order - so that the first line holds the numerically smallest number, and the last line holds the numerically largest number.

# Sample Input
# 9.1
# 43.7
# 2.2
# 62.1
# 2.1
# 9.3
# 43.5
# 4.6
# 44.6
# 4.7
# 42.7
# 47.4
# 46.6
# 4.5
# 55.6
# 4
# 9.2
# 66.6
# 2
# 2.3
# Sample Output
# 2
# 2.1
# 2.2
# 2.3
# 4
# 4.5
# 4.6
# 4.7
# 9.1
# 9.2
# 9.3
# 42.7
# 43.5
# 43.7
# 44.6
# 46.6
# 47.4
# 55.6
# 62.1
# 66.6

sort -g
# sort -n

----------------------------------------------

#!/bin/bash

# Sort Command #4

# You are given a file of text, where each line contains a number (which may be either an integer or have decimal places). There will be no extra characters other than the number or the newline at the end of each line. Sort the lines in descending order - - such that the first line holds the (numerically) largest number and the last line holds the (numerically) smallest number.

# Sample Input
# 9.1
# 43.7
# 2.2
# 62.1
# 2.1
# 9.3
# 43.5
# 4.6
# 44.6
# 4.7
# 42.7
# 47.4
# 46.6
# 4.5
# 55.6
# 4
# 9.2
# 66.6
# 2
# 2.3
# Sample Output
# 66.6
# 62.1
# 55.6
# 47.4
# 46.6
# 44.6
# 43.7
# 43.5
# 42.7
# 9.3
# 9.2
# 9.1
# 4.7
# 4.6
# 4.5
# 4
# 2.3
# 2.2
# 2.1
# 2

sort -nr
# sort -n -r

----------------------------------------------

#!/bin/bash

# You are given a file of text,which contains temperature information about American cities, in TSV (tab-separated) format. The first column is the name of the city and the next four columns are the average temperature in the months of Jan, Feb, March and April (see the sample input). Rearrange the rows of the table in descending order of the values for the average temperature in January.

# Sample Input 0
# Albany, N.Y.    22.2    46.6    71.1    49.3    38.60    136    64.4    57
# Albuquerque, N.M.    35.7    55.6    78.5    57.3    9.47    60    11.0    64
# Anchorage, Alaska    15.8    36.3    58.4    34.1    16.08    115    70.8    39 / 60
# Asheville, N.C.    35.8    54.1    73.0    55.2    47.07    126    15.3    39
# Atlanta, Ga.    42.7    61.6    80.0    62.8    50.20    115    2.1    69 / 65
# Atlantic City, N.J.    32.1    50.6    75.3    55.1    40.59    113    16.2    60 / 54
# Austin, Texas    50.2    68.3    84.2    70.6    33.65    85    0.9    62 / 58
# Baltimore, Md.    32.3    53.2    76.5    55.4    41.94    115    21.5    53
# Baton Rouge, La.    50.1    66.6    81.7    68.1    63.08    110    0.2    52 / 46
# Billings, Mont.    24.0    46.1    72.0    48.1    14.77    96    56.9    69
# Birmingham, Ala.    42.6    61.3    80.2    62.9    53.99    117    1.5    60
# Bismarck, N.D.    10.2    43.3    70.4    45.2    16.84    96    44.3    64
# Boise, Idaho    30.2    50.6    74.7    52.8    12.19    89    20.6    64
# Boston, Mass.    29.3    48.3    73.9    54.1    42.53    127    42.8    52 / 66
# Bridgeport, Conn.    29.9    48.9    74.0    54.7    44.15    119    26.2    55 / 49
# Sample Output 0
# Austin, Texas    50.2    68.3    84.2    70.6    33.65    85    0.9    62 / 58
# Baton Rouge, La.    50.1    66.6    81.7    68.1    63.08    110    0.2    52 / 46
# Atlanta, Ga.    42.7    61.6    80.0    62.8    50.20    115    2.1    69 / 65
# Birmingham, Ala.    42.6    61.3    80.2    62.9    53.99    117    1.5    60
# Asheville, N.C.    35.8    54.1    73.0    55.2    47.07    126    15.3    39
# Albuquerque, N.M.    35.7    55.6    78.5    57.3    9.47    60    11.0    64
# Baltimore, Md.    32.3    53.2    76.5    55.4    41.94    115    21.5    53
# Atlantic City, N.J.    32.1    50.6    75.3    55.1    40.59    113    16.2    60 / 54
# Boise, Idaho    30.2    50.6    74.7    52.8    12.19    89    20.6    64
# Bridgeport, Conn.    29.9    48.9    74.0    54.7    44.15    119    26.2    55 / 49
# Boston, Mass.    29.3    48.3    73.9    54.1    42.53    127    42.8    52 / 66
# Billings, Mont.    24.0    46.1    72.0    48.1    14.77    96    56.9    69
# Albany, N.Y.    22.2    46.6    71.1    49.3    38.60    136    64.4    57
# Anchorage, Alaska    15.8    36.3    58.4    34.1    16.08    115    70.8    39 / 60
# Bismarck, N.D.    10.2    43.3    70.4    45.2    16.84    96    44.3    64
# Explanation 0

# this does not work as it only prints the sorted January temperatures
# cut -f 2 | sort -r

sort -t $'\t' -k 2 -nr

----------------------------------------------

#!/bin/bash

# You are given a file of tab separated weather data (TSV). There is no header column in this data file.
# The first five columns of this data are: (a) the name of the city (b) the average monthly temperature in Jan (in Fahreneit). (c) the average monthly temperature in April (in Fahreneit). (d) the average monthly temperature in July (in Fahreneit). (e) the average monthly temperature in October (in Fahreneit).

# You need to sort this file in ascending order of the second column (i.e. the average monthly temperature in January).

# Sample Input
# Albany, N.Y.    22.2    46.6    71.1    49.3    38.60   136 64.4    57
# Albuquerque, N.M.   35.7    55.6    78.5    57.3    9.47    60  11.0    64
# Anchorage, Alaska   15.8    36.3    58.4    34.1    16.08   115 70.8    39 / 60
# Asheville, N.C. 35.8    54.1    73.0    55.2    47.07   126 15.3    39
# Atlanta, Ga.    42.7    61.6    80.0    62.8    50.20   115 2.1 69 / 65
# Atlantic City, N.J. 32.1    50.6    75.3    55.1    40.59   113 16.2    60 / 54
# Austin, Texas   50.2    68.3    84.2    70.6    33.65   85  0.9 62 / 58
# Baltimore, Md.  32.3    53.2    76.5    55.4    41.94   115 21.5    53
# Baton Rouge, La.    50.1    66.6    81.7    68.1    63.08   110 0.2 52 / 46
# Billings, Mont. 24.0    46.1    72.0    48.1    14.77   96  56.9    69
# Birmingham, Ala.    42.6    61.3    80.2    62.9    53.99   117 1.5 60
# Bismarck, N.D.  10.2    43.3    70.4    45.2    16.84   96  44.3    64
# Boise, Idaho    30.2    50.6    74.7    52.8    12.19   89  20.6    64
# Boston, Mass.   29.3    48.3    73.9    54.1    42.53   127 42.8    52 / 66
# Bridgeport, Conn.   29.9    48.9    74.0    54.7    44.15   119 26.2    55 / 49
# Sample Output
# Bismarck, N.D.  10.2    43.3    70.4    45.2    16.84   96  44.3    64
# Anchorage, Alaska   15.8    36.3    58.4    34.1    16.08   115 70.8    39 / 60
# Albany, N.Y.    22.2    46.6    71.1    49.3    38.60   136 64.4    57
# Billings, Mont. 24.0    46.1    72.0    48.1    14.77   96  56.9    69
# Boston, Mass.   29.3    48.3    73.9    54.1    42.53   127 42.8    52 / 66
# Bridgeport, Conn.   29.9    48.9    74.0    54.7    44.15   119 26.2    55 / 49
# Boise, Idaho    30.2    50.6    74.7    52.8    12.19   89  20.6    64
# Atlantic City, N.J. 32.1    50.6    75.3    55.1    40.59   113 16.2    60 / 54
# Baltimore, Md.  32.3    53.2    76.5    55.4    41.94   115 21.5    53
# Albuquerque, N.M.   35.7    55.6    78.5    57.3    9.47    60  11.0    64
# Asheville, N.C. 35.8    54.1    73.0    55.2    47.07   126 15.3    39
# Birmingham, Ala.    42.6    61.3    80.2    62.9    53.99   117 1.5 60
# Atlanta, Ga.    42.7    61.6    80.0    62.8    50.20   115 2.1 69 / 65
# Baton Rouge, La.    50.1    66.6    81.7    68.1    63.08   110 0.2 52 / 46
# Austin, Texas   50.2    68.3    84.2    70.6    33.65   85  0.9 62 / 58

sort -t $'\t' -k 2 -n

----------------------------------------------

#!/bin/bash

# You are given a file of pipe-delimited weather data (TSV). There is no header column in this data file. The first five columns of this data are: (a) the name of the city (b) the average monthly temperature in Jan (in Fahreneit). (c) the average monthly temperature in April (in Fahreneit). (d) the average monthly temperature in July (in Fahreneit). (e) the average monthly temperature in October (in Fahreneit).

# You need to sort this file in descending order of the second column (i.e. the average monthly temperature in January).

# Sample Input
# Albany, N.Y.|22.2|46.6|71.1|49.3|38.60|136|64.4|57
# Albuquerque, N.M.|35.7|55.6|78.5|57.3|9.47|60|11.0|64
# Anchorage, Alaska|15.8|36.3|58.4|34.1|16.08|115|70.8|39 / 60
# Asheville, N.C.|35.8|54.1|73.0|55.2|47.07|126|15.3|39
# Atlanta, Ga.|42.7|61.6|80.0|62.8|50.20|115|2.1|69 / 65
# Atlantic City, N.J.|32.1|50.6|75.3|55.1|40.59|113|16.2|60 / 54
# Austin, Texas|50.2|68.3|84.2|70.6|33.65|85|0.9|62 / 58
# Baltimore, Md.|32.3|53.2|76.5|55.4|41.94|115|21.5|53
# Baton Rouge, La.|50.1|66.6|81.7|68.1|63.08|110|0.2|52 / 46
# Billings, Mont.|24.0|46.1|72.0|48.1|14.77|96|56.9|69
# Birmingham, Ala.|42.6|61.3|80.2|62.9|53.99|117|1.5|60
# Bismarck, N.D.|10.2|43.3|70.4|45.2|16.84|96|44.3|64
# Boise, Idaho|30.2|50.6|74.7|52.8|12.19|89|20.6|64
# Boston, Mass.|29.3|48.3|73.9|54.1|42.53|127|42.8|52 / 66
# Bridgeport, Conn.|29.9|48.9|74.0|54.7|44.15|119|26.2|55 / 49
# Sample Output
# Austin, Texas|50.2|68.3|84.2|70.6|33.65|85|0.9|62 / 58
# Baton Rouge, La.|50.1|66.6|81.7|68.1|63.08|110|0.2|52 / 46
# Atlanta, Ga.|42.7|61.6|80.0|62.8|50.20|115|2.1|69 / 65
# Birmingham, Ala.|42.6|61.3|80.2|62.9|53.99|117|1.5|60
# Asheville, N.C.|35.8|54.1|73.0|55.2|47.07|126|15.3|39
# Albuquerque, N.M.|35.7|55.6|78.5|57.3|9.47|60|11.0|64
# Baltimore, Md.|32.3|53.2|76.5|55.4|41.94|115|21.5|53
# Atlantic City, N.J.|32.1|50.6|75.3|55.1|40.59|113|16.2|60 / 54
# Boise, Idaho|30.2|50.6|74.7|52.8|12.19|89|20.6|64
# Bridgeport, Conn.|29.9|48.9|74.0|54.7|44.15|119|26.2|55 / 49
# Boston, Mass.|29.3|48.3|73.9|54.1|42.53|127|42.8|52 / 66
# Billings, Mont.|24.0|46.1|72.0|48.1|14.77|96|56.9|69
# Albany, N.Y.|22.2|46.6|71.1|49.3|38.60|136|64.4|57
# Anchorage, Alaska|15.8|36.3|58.4|34.1|16.08|115|70.8|39 / 60
# Bismarck, N.D.|10.2|43.3|70.4|45.2|16.84|96|44.3|64

sort -t$'|' -k2 -nr

----------------------------------------------

#!/bin/bash

# 'Uniq' Command #1

# In this challenge, we practice using the uniq command to eliminate consecutive repetitions of a line when a text file is piped through it.

# Given a text file, remove the consecutive repetitions of any line.

# Sample Input
# 00
# 00
# 01
# 01
# 00
# 00
# 02
# 02
# Sample Output
# 00
# 01
# 00
# 02

uniq

----------------------------------------------

#!/bin/bash

# 'Uniq' Command #2

# In this challenge, we practice using the uniq command to eliminate consecutive repetitions of a line when a text file is piped through it.

# Given a text file, count the number of times each line repeats itself. Only consider consecutive repetitions. Display the space separated count and line, respectively. There shouldn't be any leading or trailing spaces. Please note that the uniq -c command by itself will generate the output in a different format than the one expected here.

# Sample Input
# 00
# 00
# 01
# 01
# 00
# 00
# 02
# 02
# 03
# aa
# aa
# aa
# Sample Output
# 2 00
# 2 01
# 2 00
# 2 02
# 1 03
# 3 aa

uniq -c | tr -s " " | cut -c 2-
# from editorial which I have also thought about
# uniq -c | cut -c7-

----------------------------------------------

#!/bin/bash

# 'Uniq' command #3

# Given a text file, count the number of times each line repeats itself (only consider consecutive repetions). Display the count and the line, separated by a space. There shouldn't be leading or trailing spaces. Please note that the uniq -c command by itself will generate the output in a different format.

# This time, compare consecutive lines in a case insensitive manner. So, if a line X is followed by case variants, the output should count all of them as the same (but display only the form X in the second column).

# So, as you might observe in the case below: aa, AA and Aa are all counted as instances of 'aa'.

# Sample Input
# 00
# 00
# 01
# 01
# 00
# 00
# 02
# 02
# 03
# aa
# AA
# Aa
# Sample Output
# 2 00
# 2 01
# 2 00
# 2 02
# 1 03
# 3 aa

uniq -ci | cut -c 7-
# tr [:upper:] [:lower:] | uniq -c | cut -c 7- # also correct but does not exactly correspond with output due to all letters are lowercase, even if count was correct

----------------------------------------------

#!/bin/bash

# 'Uniq' command #4


# Given a text file, display only those lines which are not followed or preceded by identical replications.

# Sample Input
# A00
# a00
# 01
# 01
# 00
# 00
# 02
# 02
# A00
# 03
# aa
# aa
# aa
# Sample Output
# A00
# a00
# A00
# 03

uniq -u

----------------------------------------------

#!/bin/bash

# Paste - 1

# In this challenge, we practice using the paste command to merge lines of a given file.

# You are given a CSV file where each row contains the name of a city and its state separated by a comma. Your task is to replace the newlines in the file with semicolons as demonstrated in the sample.

# Sample Input
# Albany, N.Y.
# Albuquerque, N.M.
# Anchorage, Alaska
# Asheville, N.C.
# Atlanta, Ga.
# Atlantic City, N.J.
# Austin, Texas
# Baltimore, Md.
# Baton Rouge, La.
# Billings, Mont.
# Birmingham, Ala.
# Bismarck, N.D.
# Boise, Idaho
# Boston, Mass.
# Bridgeport, Conn.
# Sample Output
# Albany, N.Y.;Albuquerque, N.M.;Anchorage, Alaska;Asheville, N.C.;Atlanta, Ga.;Atlantic City, N.J.;Austin, Texas;Baltimore, Md.;Baton Rouge, La.;Billings, Mont.;Birmingham, Ala.;Bismarck, N.D.;Boise, Idaho;Boston, Mass.;Bridgeport, Conn.

# tr "\n" ";" | cut -c -$($(wc -c) - 1)
# tr "\n" ";" | cut -c -236
# charCount=$(((wc -m)-1))
# echo $charCount
# tr "\n" ";" | cut -c -$($(wc -c)-1)

# Solution 1
modifiedChars=$(tr "\n" ";")
modifiedCharsCount=$(echo ${modifiedChars} | wc -c)
echo ${modifiedChars} | cut -c -$((modifiedCharsCount-2))

# Solution 2
# paste -s -d ";"

# Discussions
# 1.
# a=`tr '\n' ';'`
# echo "${a::-1}"
# 2.
# tr '\n' ';' | head -c -1
# 3.
# paste -s | tr $'\t' ";"

----------------------------------------------

#!/bin/bash

# Paste - 2

# In this challenge, we practice using the paste command to merge lines of a given file.
# You are given a CSV file where each row contains the name of a city and its state separated by a comma. Your task is to restructure the file so that three consecutive rows are folded into one line and are separated by semicolons.

# Input Format
# You are given a CSV file where each row contains the name of a city and its state separated by a comma.

# Output Format
# Restructure the file so that three consecutive rows are folded into one line and are separated by semicolons.

# Sample Input
# Albany, N.Y.
# Albuquerque, N.M.
# Anchorage, Alaska
# Asheville, N.C.
# Atlanta, Ga.
# Atlantic City, N.J.
# Austin, Texas
# Baltimore, Md.
# Baton Rouge, La.
# Billings, Mont.
# Birmingham, Ala.
# Bismarck, N.D.
# Boise, Idaho
# Boston, Mass.
# Bridgeport, Conn.

# Sample Output
# Albany, N.Y.;Albuquerque, N.M.;Anchorage, Alaska
# Asheville, N.C.;Atlanta, Ga.;Atlantic City, N.J.
# Austin, Texas;Baltimore, Md.;Baton Rouge, La.
# Billings, Mont.;Birmingham, Ala.;Bismarck, N.D.
# Boise, Idaho;Boston, Mass.;Bridgeport, Conn.

paste -s -d ";;\n"

# Other solutions
# 1. paste - - - | tr $'\t' ';
# 2. paste - - - -d';'
# 3. sed 'N;N;s/\n/;/g'
# 4.
# awk '{
# if (NR % 3 == 0)
#     printf $0"\n"
# else
#     printf $0";"
# }'

----------------------------------------------

#!/bin/bash

# Paste - 3

# Given a CSV file where each row contains the name of a city and its state separated by a comma, your task is to replace the newlines in the file with tabs as demonstrated in the sample.

# Input Format
# You are given a CSV file where each row contains the name of a city and its state separated by a comma.

# Output Format
# Replace the newlines in the input with tabs as demonstrated in the sample.

# Sample Input
# Albany, N.Y.
# Albuquerque, N.M.
# Anchorage, Alaska
# Asheville, N.C.
# Atlanta, Ga.
# Atlantic City, N.J.
# Austin, Texas
# Baltimore, Md.
# Baton Rouge, La.
# Billings, Mont.
# Birmingham, Ala.
# Bismarck, N.D.
# Boise, Idaho
# Boston, Mass.
# Bridgeport, Conn.
# Sample Output
# Albany, N.Y.    Albuquerque, N.M.   Anchorage, Alaska   Asheville, N.C.Atlanta, Ga. Atlantic City, N.J. Austin, Texas   Baltimore, Md.  Baton Rouge, La.    Billings, Mont. Birmingham, Ala.    Bismarck, N.D.  Boise, Idaho    Boston, Mass.   Bridgeport, Conn.

paste -s -d "\t"

----------------------------------------------

# Paste - 4

# Given a CSV file where each row contains the name of a city and its state separated by a comma, your task is to restructure the file in such a way, that three consecutive rows are folded into one, and separated by tab.

# Input Format
# You are given a CSV file where each row contains the name of a city and its state separated by a comma.

# Output Format
# Restructure the file in such a way, that every group of three consecutive rows are folded into one, and separated by tab.

# Sample Input
# Albany, N.Y.
# Albuquerque, N.M.
# Anchorage, Alaska
# Asheville, N.C.
# Atlanta, Ga.
# Atlantic City, N.J.
# Austin, Texas
# Baltimore, Md.
# Baton Rouge, La.
# Billings, Mont.
# Birmingham, Ala.
# Bismarck, N.D.
# Boise, Idaho
# Boston, Mass.
# Bridgeport, Conn.
# Sample Output
# Albany, N.Y.    Albuquerque, N.M.   Anchorage, Alaska
# Asheville, N.C. Atlanta, Ga.    Atlantic City, N.J.
# Austin, Texas   Baltimore, Md.  Baton Rouge, La.
# Billings, Mont. Birmingham, Ala.    Bismarck, N.D.
# Boise, Idaho    Boston, Mass.   Bridgeport, Conn.

# using Python
import sys

# city = "dummy"
separators = "\t\t\n"
ctr = 0

# Solution 1 - correct but no way to terminate loop
# while city != None:
#     city = input()
#     print(city, end = separators[ctr % 3])
#     ctr += 1

# Solution 2
for city in sys.stdin:
    print(city.rstrip(), end = separators[ctr % 3])
    ctr += 1

# using Bash
# paste -s -d "\t\t\n"

----------------------------------------------

#!/bin/bash

# Read in an Array

# Given a list of countries, each on a new line, your task is to read them into an array and then display the entire array, with a space between each of the countries' names.

# Input Format
# A list of country names. The only characters present in the country names will be upper or lower case characters and hyphens.

# Output Format
# Display the entire array of country names, with a space between each of them.

# Sample Input
# Namibia
# Nauru
# Nepal
# Netherlands
# NewZealand
# Nicaragua
# Niger
# Nigeria
# NorthKorea
# Norway

# Sample Output
# Namibia Nauru Nepal Netherlands NewZealand Nicaragua Niger Nigeria NorthKorea Norway

# Explanation
# The entire array has been displayed.

# ctr=0
# while read input; do
# {
#     countries[${ctr}]=${input}
#     ctr=$((ctr+1))
# }
# done
# echo ${countries[@]}

countries=($(cat))
echo ${countries[@]}
