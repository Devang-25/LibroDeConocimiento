/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <algorithm>
#include <iostream>
#include <string>
#include <list>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <cmath>

std::string organizingContainers(const std::vector<std::vector<int>>& container)
{
    std::unordered_map<int, int> ballAndCountMap;
    std::vector<int> containerTotalBallsCount;
    containerTotalBallsCount.reserve(container.size());

    for (const auto& balls : container)
    {
        int currentCount = 0;
        for (unsigned ctr = 0u; ctr < balls.size(); ++ctr)
        {
            int ballCount = balls.at(ctr);
            ballAndCountMap[ctr] += ballCount;
            currentCount += ballCount;
        }
        containerTotalBallsCount.push_back(currentCount);
    }
    for (const auto& totalCount : containerTotalBallsCount)
    {
        auto it = std::find_if(ballAndCountMap.begin(), ballAndCountMap.end(),
                                [&totalCount](const std::pair<int, int>& ballCount)
                                {
                                    return ballCount.second == totalCount;
                                });
        if (it == ballAndCountMap.end())
        {
            return "Impossible";
        }
        ballAndCountMap.erase(it);
    }
    return "Possible";
}
int main()
{
    // std::cout << "\n" << organizingContainers(//8, 0, 5, 4,
    //     {
    //         {0,1,2,0,2},
    //         {1,0,2,0,0},
    //         {2,1,0,1,0},
    //         {0,1,0,0,0},
    //         {2,0,0,0,1},
    //     });

    std::cout << "\n" << organizingContainers(
        {
            {0,1,2,0,1},
            {1,0,2,0,0},
            {2,1,0,1,0},
            {0,1,0,0,0},
            {2,0,0,0,2},
        });

    // std::cout << "\n" << organizingContainers(
    //     {
    //         {0, 2, 1},
    //         {1, 1, 1},
    //         {2, 0, 0},
    //     });

    std::cout << "\n" << organizingContainers(
        {
            {1, 3, 1},
            {2, 1, 2},
            {3, 3, 3},
        });
    return 0;
}
